{"version":3,"sources":["components/title.js","components/body.js","App.js","serviceWorker.js","index.js"],"names":["Tittle","react_default","a","createElement","className","Component","Body","state","customers","textbox","searchOption","searchByCountry","e","target","value","_this","setState","componentDidMount","axios","get","then","res","data","changeTextBox","_this2","this","id","onChange","type","aria-label","aria-describedby","onClick","map","customer","key","name","phone","country","App","title","body","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c122eb27.chunk.js","sourcesContent":["import  React, {Component} from 'react'\n\nclass Tittle extends Component{\n    render(){\n        return (\n            <div className=\"span6\">\n                    <h1 className=\"muted\">Phone List</h1>\n            </div>\n        )\n    }\n}\n\nexport default Tittle","import React, {Component} from 'react'\nimport axios from 'axios'\nclass Body extends Component{\n\n    state = {\n        customers: []\n        ,textbox:''\n        ,searchOption:'country'\n    }\n\n    componentDidMount(){\n        axios.get('http://localhost:8080/phones/')\n        .then(res=>{\n            const customers = res.data\n            this.setState({ customers })\n        })       \n    }\n\n    searchByCountry=(e)=>{\n\n        if (e.target.value==='clean'){\n        this.setState({textbox:''})\n        this.componentDidMount()\n        }\n        else{\n        axios.get('http://localhost:8080/phones/'+e.target.value+'/'+this.state.textbox+'/')\n        .then(res=>{\n            this.setState({ customers:res.data })\n        })   \n    }    \n    }\n\n    changeTextBox=(e)=>{\n        this.setState({textbox:e.target.value})\n\n    }\n\n    render(){\n        return(\n            <div>\n                <table>\n                    <tbody>\n                    <tr>\n                        <td>\n                            <div className=\"input-group input-group-sm mb-3\">\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\" id=\"inputGroup-sizing-sm\">Search</span>\n                            </div>\n                            <input  value={this.state.textbox} \n                                    onChange={this.changeTextBox} \n                                    type=\"text\" \n                                    className=\"form-control\" \n                                    aria-label=\"Sizing example input\" \n                                    aria-describedby=\"inputGroup-sizing-sm\">\n                            </input>\n                            </div>\n                            \n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n                <table>\n                    <tbody>\n                    <tr>\n                        <td> \n                            <button className=\"btn btn-secondary btn-sm\" value='country' onClick={this.searchByCountry}> by Country</button> \n                        </td>\n                        <td>\n                            <button className=\"btn btn-secondary btn-sm\" value='name' onClick={this.searchByCountry}> by Name</button> \n                        </td>\n                        <td>\n                            <button className=\"btn btn-secondary btn-sm\" value='phone' onClick={this.searchByCountry}> by Phone</button> \n                        </td>\n                        <td>\n                            <button className=\"btn btn-secondary btn-sm\" value='clean' onClick={this.searchByCountry}> Clean</button>\n                            </td>\n                    </tr>\n                    </tbody>\n                </table>\n                <br></br>\n\n                <table  className=\"table\">\n                <thead>\n                    <tr>\n                    <th>Id</th>\n                    <th>Name</th>\n                    <th>Phone</th>\n                    <th>Country</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {\n                        this.state.customers.map(customer => \n                            \n                                <tr key={customer.id}>\n                                    <td>{customer.id}</td>\n                                    <td>{customer.name}</td>\n                                    <td>{customer.phone}</td>\n                                    <td>{customer.country}</td>\n                                </tr>\n                            )\n                    }\n                </tbody>\n                <tfoot>\n                    <tr>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    <td></td>\n                    </tr>\n                </tfoot>\n                </table>\n\n            </div>\n        )\n    }\n}\n\nexport default Body","import React from 'react'\nimport './components/title'\nimport Tittle from './components/title'\nimport Body from './components/body'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tittle></Tittle>\n      <br></br>\n      <Body></Body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}